From 47006a8c6b4de7a12c1982d9011470299d2fd761 Mon Sep 17 00:00:00 2001
From: Robert de Bath <rdebath@tvisiontech.co.uk>
Date: Fri, 1 Jun 2018 21:23:33 +0100
Subject: [PATCH] Add a "Locked in UTF8" sequence.

This is for support of the sequences.

ESC % / G       DOCS: UTF-8 Impl lvl 1, No Standard return allowed
ESC % / H       DOCS: UTF-8 Impl lvl 2, No Standard return allowed
ESC % / I       DOCS: UTF-8 Impl lvl 3, No Standard return allowed

This is a dead end for ECMA-35, however ECMA-48 allows a get-out:

CSI Pf ; Pc; SP D
		Change current "Font".
		Pf is the font number (see SGR), only zero for the
		primary font is supported.
		Pc is a supported codepage number

And I define the codepages supported as

    2022        Switch to ISO 2022 mode.
    65001       UTF-8 in normal DOCS mode.
    4110        UTF-8 randomly mixed with ISO 2022.
    1400        UTF-8 with DOCS disabled.

A trivial patch would allow the mode to be configured by I recommend
against this as the functionality is provided by the "Disable remote
character set changing" option.
---
 terminal.c | 41 ++++++++++++++++++++++++++++++++++++++---
 1 file changed, 38 insertions(+), 3 deletions(-)

diff --git a/terminal.c b/terminal.c
index 393cb59..81226b9 100644
--- a/terminal.c
+++ b/terminal.c
@@ -3262,7 +3262,7 @@ static void term_out(Terminal *term)
 	    }
 	}
 
-	if (!term->no_remote_charset) {
+	if (!term->no_remote_charset && (term->utf < 2 || term->utf8linedraw)) {
 	    /* Linux direct to font compatability in unicode private zone.
 	     * Maps the VGA rom font (CP437) to U+F000.
 	     * Note: Console tools can change this, but if anything
@@ -3815,11 +3815,19 @@ static void term_out(Terminal *term)
 		  case ANSI('8', '%'):	/* Old Linux code */
 		  case ANSI('G', '%'):
 		    compatibility(ANSI);
-		    term->utf = 1;
+		    if (!term->no_remote_charset && term->utf < 2)
+			term->utf = 1;
 		    break;
 		  case ANSI('@', '%'):  /* DOCS, Standard return */
 		    compatibility(ANSI);
-		    term->utf = 0;
+		    if (!term->no_remote_charset && term->utf < 2)
+			term->utf = 0;
+		    break;
+		  case ANSI('G', ANSI('%', '/')):
+		  case ANSI('H', ANSI('%', '/')):
+		  case ANSI('I', ANSI('%', '/')):
+		    if (!term->no_remote_charset && term->utf < 2)
+			term->utf = 3;
 		    break;
 		}
 		break;
@@ -4733,6 +4741,33 @@ static void term_out(Terminal *term)
 			term->use_bce = (term->esc_args[0] <= 0);
 			set_erase_char(term);
 			break;
+		      case ANSI('D', ' '): /* FNT - Select "Font" */
+			compatibility(OTHER);
+			if(term->no_remote_charset) break;
+			if(term->esc_nargs == 2 && term->esc_args[0] == 0) {
+			    /* Allow changing of only the "primary" font
+			     * using the normal registory of codepage numbers.
+			     *
+			     * However, UTF-8 has many codepage values.
+			     * 65001 at Microsoft
+			     * 1208,1400..1448 at IBM
+			     * 4110 at SAP
+			     *
+			     * WARNING: All entries here should be at least
+			     * three digits to prevent random invocation.
+			     */
+			    term->utf8linedraw = 0;
+			    if(term->esc_args[1] == 2022)
+				term->utf = 0;	/* Line codepage */
+			    else if(term->esc_args[1] == 65001)
+				term->utf = 1;	/* UTF-8 normal style */
+			    else if(term->esc_args[1] == 4110) {
+				term->utf = 1;	/* UTF-8 and Linepage Mixed. */
+				term->utf8linedraw = 1;
+			    } else if(term->esc_args[1] == 1400)
+				term->utf = 3;	/* UTF-8 ONLY, no DOCS return. */
+			}
+			break;
 		      case ANSI('Z', ' '): /* PEC - PRESENTATION EXPAND OR CONTRACT */
 			compatibility(ANSI);
 			term->width_override = term->esc_args[0];
-- 
2.1.4

