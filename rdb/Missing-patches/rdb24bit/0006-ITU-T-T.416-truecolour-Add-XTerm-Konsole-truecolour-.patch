From f737f5d65b2d64c35b244de3dc879972a3626d63 Mon Sep 17 00:00:00 2001
From: Robert de Bath <rdebath@tvisiontech.co.uk>
Date: Tue, 3 Jun 2014 21:39:53 +0100
Subject: [PATCH 06/71] ITU-T T.416 truecolour: Add XTerm/Konsole truecolour
 mode.

Phase 1, map the colours to the nearest XTerm 256 colour mode colour.
This is how XTerm does it.
---
 terminal.c | 78 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 78 insertions(+)

diff --git a/terminal.c b/terminal.c
index 4624f48..9199af2 100644
--- a/terminal.c
+++ b/terminal.c
@@ -111,6 +111,7 @@ static void scroll(Terminal *, int, int, int, int);
 #ifdef OPTIMISE_SCROLL
 static void scroll_display(Terminal *, int, int, int);
 #endif /* OPTIMISE_SCROLL */
+static void set_truecolour_attr(Terminal *, int, int, int, int);
 
 static termline *newline(Terminal *term, int cols, int bce)
 {
@@ -3966,6 +3967,14 @@ static void term_out(Terminal *term)
 					     << ATTR_FGSHIFT);
 					i += 2;
 				    }
+				    if (i+4 < term->esc_nargs &&
+					term->esc_args[i+1] == 2) {
+					set_truecolour_attr(term, 1,
+					    term->esc_args[i+2],
+					    term->esc_args[i+3],
+					    term->esc_args[i+4]);
+					i += 4;
+				    }
 				    break;
 				  case 48:   /* xterm 256-colour mode */
 				    if (i+2 < term->esc_nargs &&
@@ -3976,6 +3985,14 @@ static void term_out(Terminal *term)
 					     << ATTR_BGSHIFT);
 					i += 2;
 				    }
+				    if (i+4 < term->esc_nargs &&
+					term->esc_args[i+1] == 2) {
+					set_truecolour_attr(term, 0,
+					    term->esc_args[i+2],
+					    term->esc_args[i+3],
+					    term->esc_args[i+4]);
+					i += 4;
+				    }
 				    break;
 				}
 			    }
@@ -6559,3 +6576,64 @@ int term_get_userpass_input(Terminal *term, prompts_t *p,
 	return +1; /* all done */
     }
 }
+
+static void
+set_truecolour_attr(Terminal * term, int fg, int r, int g, int b)
+{
+    int best_diff = -1, nearest_static = 0;
+
+    /*
+     * Annoyingly the 6x6x6 cube that XTerm uses by default (and so our
+     * cube) isn't the websafe colours. This means the standard method
+     * of calculating the best match won't work, but I can do better
+     * than xterm does because we don't ever change the mapping.
+     */
+
+    {
+	int nr, ng, nb;
+
+	nr = (r-36)/40; if (nr == 0) nr = (r+47)/95;
+	ng = (g-36)/40; if (ng == 0) ng = (g+47)/95;
+	nb = (b-36)/40; if (nb == 0) nb = (b+47)/95;
+
+	nearest_static = 16 + nb + ng * 6 + nr * 36;
+
+	if (nr == ng && ng == nb) { /* If it's grey */
+	    int tc, tg;
+	    int tw, nw;
+	    tw = (r+g+b)/3; nw = 232 + (tw-4)/10; if (nw > 255) nw = 255;
+
+	    tc = nr ? nr * 40 + 55 : 0;
+	    tg = (nw-232) * 10 + 8;
+
+	    if ( (tc-tw)*(tc-tw) >= (tg-tw)*(tg-tw) )
+		nearest_static = nw;
+	}
+
+	if (nearest_static<232) {
+	    int i = nearest_static-16;
+	    nr = i / 36; ng = (i / 6) % 6; nb = i % 6;
+	    nr = nr ? nr * 40 + 55 : 0;
+	    ng = ng ? ng * 40 + 55 : 0;
+	    nb = nb ? nb * 40 + 55 : 0;
+	} else {
+	    int i = nearest_static-232;
+	    nr=ng=nb = i * 10 + 8;
+	}
+
+	{
+	    int d;
+	    d = nr-r; best_diff += d*d;
+	    d = ng-g; best_diff += d*d;
+	    d = nb-b; best_diff += d*d;
+	}
+    }
+
+    if (fg) {
+	term->curr_attr &= ~ATTR_FGMASK;
+	term->curr_attr |= (nearest_static << ATTR_FGSHIFT);
+    } else {
+	term->curr_attr &= ~ATTR_BGMASK;
+	term->curr_attr |= (nearest_static << ATTR_BGSHIFT);
+    }
+}
-- 
2.1.4

